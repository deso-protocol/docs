map $http_origin $allow_origin 
{
    # check the calling server. if we approve give its name to the browser

    # any cloutini subdomain is allowed to call us and give results to the user
    ~^https?://(.*\.)?cloutini.com(:\d+)?$ $http_origin;

    # any bitclout subdomain is allowed to call us and give results to the user
    ~^https?://(.*\.)?bitclout.com(:\d+)?$ $http_origin;
    
    # can add other supported domains here - like bitclout.com

    # NGINX won't set empty string headers, so if no match, header is unset.
    # better yet - if no match, at least allow the main cloutini.com
    default "https://cloutini.com";
}

server {
    client_max_body_size 20m;

    listen 80;
    server_name cloutini.com;    
    server_tokens off;

    # is a front end site (not api)
    # other sites shouldn't refer to http:// anyway
    # add_header 'Access-Control-Allow-Origin' '*';

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

server { 
    client_max_body_size 20m;
 
    listen 443 ssl; 
    server_name cloutini.com; 
    # server_tokens off;
  
    ssl_certificate /etc/letsencrypt/live/cloutini.com/fullchain.pem; 
    ssl_certificate_key /etc/letsencrypt/live/cloutini.com/privkey.pem; 
    include /etc/letsencrypt/options-ssl-nginx.conf; 
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
 
    location / { 
        add_header 'Access-Control-Allow-Origin' $allow_origin;
     
        proxy_set_header    Host                $http_host; 
        proxy_set_header    X-Real-IP           $remote_addr; 
        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
 
        proxy_set_header X-Forwarded-Proto $scheme; 
        proxy_set_header X-NginX-Proxy true; 
        proxy_redirect off;
 
        # this might have been
        # proxy_pass  http://example.org;
        
        # will become this when all done
        proxy_pass http://frontend:8080;
     
    }
 
    location /api/ { 
        # do not pass the CORS header from the response  
        # of the proxied server to the client...  
        # ignore value from node.js express caddyfile, etc 
        proxy_hide_header 'Access-Control-Allow-Origin';

 
        add_header 'Access-Control-Allow-Origin' $allow_origin;
     
        proxy_set_header    Host                $http_host; 
        proxy_set_header    X-Real-IP           $remote_addr; 
        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
 
        proxy_set_header X-Forwarded-Proto $scheme; 
        proxy_set_header X-NginX-Proxy true; 
        proxy_redirect off;
 
        proxy_pass http://backend:17001;
    
   } 
}

